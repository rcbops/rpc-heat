---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the md5 of the environment file
# this will ensure consistency when deploying.
environment_version: __ENVIRONMENT_VERSION__

# User defined CIDR used for containers
# Global cidr/s used for everything.
cidr_networks:
  # Cidr used in the Management network
  container: 172.29.236.0/22
  # Cidr used in the Service network
  snet: 172.29.248.0/22
  # Cidr used in the VM network
  tunnel: 172.29.240.0/22
  # Cidr used in the Storage network
  storage: 172.29.244.0/22

# User defined list of consumed IP addresses that may intersect
# with the provided CIDR.
used_ips:
  - 172.29.236.1,172.29.236.50
  - 172.29.244.1,172.29.244.50

# As a user you can define anything that you may wish to "globally"
# override from within the rpc_deploy configuration file. Anything
# specified here will take precedence over anything else any where.
global_overrides:
  # Internal Management vip address
  internal_lb_vip_address: 172.29.236.3
  # External DMZ VIP address
  external_lb_vip_address: __EXTERNAL_VIP_IP__
  # Bridged interface to use with tunnel type networks
  tunnel_bridge: "br-vxlan"
  # Bridged interface to build containers with
  management_bridge: "br-mgmt"
  # Define your Add on container networks.
  #  group_binds: bind a provided network to a particular group
  #  container_bridge: instructs inventory where a bridge is plugged
  #                    into on the host side of a veth pair
  #  container_interface: interface name within a container
  #  ip_from_q: name of a cidr to pull an IP address from
  #  type: Networks must have a type. types are: ["raw", "vxlan", "flat", "vlan"]
  #  range: Optional value used in "vxlan" and "vlan" type networks
  #  net_name: Optional value used in mapping network names used in neutron ml2
  # You must have a management network.
  provider_networks:
    - network:
        group_binds:
          - all_containers
          - hosts
        type: "raw"
        container_bridge: "br-mgmt"
        container_interface: "eth1"
        ip_from_q: "container"
    - network:
        group_binds:
          - glance_api
          - cinder_api
          - cinder_volume
          - nova_compute
        type: "raw"
        container_bridge: "br-storage"
        container_interface: "eth2"
        ip_from_q: "storage"
    # br-snet temporarily disabled due to bug in public cloud heat/neutron
    # services that causes service net to not get assigned an interface
    #- network:
    #    group_binds:
    #      - glance_api
    #      - nova_compute
    #      - neutron_linuxbridge_agent
    #    type: "raw"
    #    container_bridge: "br-snet"
    #    container_interface: "eth3"
    #    ip_from_q: "snet"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vxlan"
        container_interface: "eth4"
        ip_from_q: "tunnel"
        type: "vxlan"
        range: "10:1000"
        net_name: "vxlan"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vlan"
        container_interface: "eth5"
        type: "flat"
        net_name: "flat"
  # Name of load balancer
  lb_name: lb_name_in_core

# User defined Infrastructure Hosts, this should be a required group
infra_hosts:
  __CLUSTER_PREFIX__-node1:
    ip: 172.29.236.1
  __CLUSTER_PREFIX__-node2:
    ip: 172.29.236.2
    affinity:
      utility_container: 0
  __CLUSTER_PREFIX__-node3:
    ip: 172.29.236.3
    affinity:
      utility_container: 0

# User defined Compute Hosts, this should be a required group
compute_hosts:
  __CLUSTER_PREFIX__-node4:
    ip: 172.29.236.4
  __CLUSTER_PREFIX__-node5:
    ip: 172.29.236.5

# User defined Storage Hosts, this should be a required group
storage_hosts:
  __CLUSTER_PREFIX__-node4:
    ip: 172.29.236.4
    # "container_vars" can be set outside of all other options as
    # host specific optional variables.
    container_vars:
      # In this example we are defining what cinder volumes are
      # on a given host.
      cinder_backends:
        # if the "limit_container_types" argument is set, within
        # the top level key of the provided option the inventory
        # process will perform a string match on the container name with
        # the value found within the "limit_container_types" argument.
        # If any part of the string found within the container
        # name the options are appended as host_vars inside of inventory.
        limit_container_types: cinder_volume
        lvm:
          volume_group: cinder-volumes
          volume_driver: cinder.volume.drivers.lvm.LVMISCSIDriver
          volume_backend_name: LVM_iSCSI

# User defined Logging Hosts, this should be a required group
log_hosts:
  __CLUSTER_PREFIX__-node1:
    ip: 172.29.236.1

# User defined Networking Hosts, this should be a required group
network_hosts:
  __CLUSTER_PREFIX__-node2:
    ip: 172.29.236.2

haproxy_hosts:
  __CLUSTER_PREFIX__-node3:
    ip: 172.29.236.3
